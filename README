This code is an illustration of how semaphores work.

I have created a semaphore variable with an initial count of 2. That means at any given point
in time at most 2 threads will have access over a certain resource.

Number of threads created are 5. In the thread function after the print statement I have put
sleep time of 1 second so as to ensure that execution does not happen too fast.

The complete output that I got is like this:-

Thread -1242531008 working
Thread -1234138304 working
Thread -1225745600 working
Thread -1250923712 working
Thread -1217352896 working

Initially when I executed the program the first two lines of the output got printed, then after
1 second the next two, followed by the 5th one after yet another 1 second.

The reason why this happend is because during 1st second only two threads have access over STDOUT. The remaining
3 threads cannot be given access to the STDOUT because they didn't get the semaphore variable as it was set to zero.

Once the first two threads complete their execution, they incremented the semaphore variable giving
opportunity to the next 2 waiting thread. And this phenomenon continues....... 
